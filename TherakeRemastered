-- Load Shaman UI Library
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Rain-Design/Libraries/main/Shaman/Library.lua'))()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Flags = Library.Flags

-- UI Setup
local Window = Library:Window({ Text = "The Rake: Remastered" })
local MainTab = Window:Tab({ Text = "Main" })
local VisualTab = Window:Tab({ Text = "Visual" })
local StatusTab = Window:Tab({ Text = "Status" })

-- Sections
local Gameplay = MainTab:Section({ Text = "Gameplay" })
local Morphs = MainTab:Section({ Text = "Morphs" })
local Teleport = MainTab:Section({ Text = "Teleport" })
local ESP = VisualTab:Section({ Text = "ESP" })
local Status = StatusTab:Section({ Text = "Live Info" })

-- Status Labels
local FlareLabel = Status:Label({ Text = "Flare Gun: Unknown" })
local RakeLabel = Status:Label({ Text = "Rake: Unknown" })
local BloodHourLabel = Status:Label({ Text = "Blood Hour: Unknown" })

-- Status Updater
RunService.RenderStepped:Connect(function()
    local flare = Workspace:FindFirstChild("FlareGun") or Workspace:FindFirstChildWhichIsA("Tool", true)
    FlareLabel:Set({ Text = flare and "Flare Gun: Spawned" or "Flare Gun: Not Found" })

    local rake = Workspace:FindFirstChild("Rake") or Workspace:FindFirstChild("RakeAI")
    RakeLabel:Set({ Text = rake and "Rake: Active" or "Rake: Not Spawned" })

    local bh = ReplicatedStorage:FindFirstChild("BloodHour")
    BloodHourLabel:Set({ Text = bh and bh.Value and "Blood Hour: ACTIVE" or "Blood Hour: Inactive" })
end)

-- WalkSpeed Bypass
local walkSpeedConnection
Gameplay:Toggle({
    Text = "WalkSpeed Bypass (30)",
    Callback = function(state)
        if walkSpeedConnection then walkSpeedConnection:Disconnect() end
        if state then
            walkSpeedConnection = RunService.RenderStepped:Connect(function()
                local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if hum and hum.WalkSpeed ~= 30 then hum.WalkSpeed = 30 end
            end)
        end
    end
})

-- Infinite Stamina
Gameplay:Toggle({
    Text = "Infinite Stamina",
    Callback = function(state)
        RunService:UnbindFromRenderStep("Stamina")
        if state then
            RunService:BindToRenderStep("Stamina", 100, function()
                local energy = LocalPlayer:FindFirstChild("Energy")
                if energy then energy.Value = 100 end
            end)
        end
    end
})

-- Full Bright with Lighting override
Gameplay:Toggle({
    Text = "Full Bright",
    Callback = function(state)
        local Light = game:GetService("Lighting")

        local function dofullbright()
            if state then
                Light.Ambient = Color3.new(1, 1, 1)
                Light.ColorShift_Bottom = Color3.new(1, 1, 1)
                Light.ColorShift_Top = Color3.new(1, 1, 1)
                Light.Brightness = 3
                Light.FogEnd = 100000
            end
        end

        if Flags.FullBrightConnection then
            Flags.FullBrightConnection:Disconnect()
            Flags.FullBrightConnection = nil
        end

        if state then
            dofullbright()
            Flags.FullBrightConnection = Light.LightingChanged:Connect(dofullbright)
        else
            Light.Ambient = Color3.new(0, 0, 0)
            Light.ColorShift_Bottom = Color3.new(0, 0, 0)
            Light.ColorShift_Top = Color3.new(0, 0, 0)
            Light.Brightness = 1
            Light.FogEnd = 1000
        end
    end
})

-- No Fall Damage
Gameplay:Toggle({
    Text = "No Fall Damage",
    Callback = function(state)
        local function onChar(char)
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum and state then
                hum.StateChanged:Connect(function(_, newState)
                    if newState == Enum.HumanoidStateType.Freefall then
                        hum:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end)
            end
        end
        if LocalPlayer.Character then onChar(LocalPlayer.Character) end
        LocalPlayer.CharacterAdded:Connect(onChar)
    end
})

-- Morphs
local function MorphInto(name)
    local morph = ReplicatedStorage:FindFirstChild("Morphs") and ReplicatedStorage.Morphs:FindFirstChild(name)
    if morph then ReplicatedStorage:WaitForChild("CharChange"):FireServer(morph) end
end

Morphs:Button({ Text = "Blood Rake", Callback = function() MorphInto("BloodRakeMorph") end })
Morphs:Button({ Text = "Rage Rake", Callback = function() MorphInto("RageRakeMorph") end })
Morphs:Button({ Text = "Shadow Rake", Callback = function() MorphInto("ShadowHourRake") end })
Morphs:Button({ Text = "Vision Rake", Callback = function() MorphInto("VisionRakeMorph") end })
Morphs:Button({ Text = "Corrupted Rake", Callback = function() MorphInto("CorrupteredRakeMorph") end })

-- Teleport to Flare Gun
local autoTPConnection

Teleport:Button({
    Text = "Teleport to Flare Gun",
    Callback = function()
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Tool") and obj.Name:lower():find("flare") then
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = obj.Handle.CFrame + Vector3.new(0, 3, 0)
                end
                break
            end
        end
    end
})

Teleport:Toggle({
    Text = "Auto Teleport to Flare Gun",
    Callback = function(state)
        if autoTPConnection then autoTPConnection:Disconnect() end
        if state then
            autoTPConnection = RunService.RenderStepped:Connect(function()
                for _, obj in pairs(Workspace:GetDescendants()) do
                    if obj:IsA("Tool") and obj.Name:lower():find("flare") then
                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            LocalPlayer.Character.HumanoidRootPart.CFrame = obj.Handle.CFrame + Vector3.new(0, 3, 0)
                        end
                        break
                    end
                end
            end)
        end
    end
})

-- ESP Helpers
local activeESP = {}

local function applyHighlight(obj, color)
    if not obj or not obj:IsDescendantOf(Workspace) then return end
    if not activeESP[obj] and obj:FindFirstChild("HumanoidRootPart") then
        local h = Instance.new("Highlight", obj)
        h.FillColor = color
        h.OutlineColor = color
        h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        activeESP[obj] = h
    end
end

local function clearESP()
    for obj, h in pairs(activeESP) do
        if h then h:Destroy() end
    end
    activeESP = {}
end

-- ESP Toggles
ESP:Toggle({
    Text = "ESP: Rake",
    Callback = function(state)
        RunService:UnbindFromRenderStep("RakeESP")
        if state then
            RunService:BindToRenderStep("RakeESP", 1, function()
                for _, v in pairs(Workspace:GetChildren()) do
                    if v.Name:lower():find("rake") then
                        applyHighlight(v, Color3.fromRGB(255, 0, 0))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

ESP:Toggle({
    Text = "ESP: Players",
    Callback = function(state)
        RunService:UnbindFromRenderStep("PlayerESP")
        if state then
            RunService:BindToRenderStep("PlayerESP", 1, function()
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= LocalPlayer and p.Character then
                        applyHighlight(p.Character, Color3.fromRGB(0, 170, 255))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

ESP:Toggle({
    Text = "ESP: Flare Gun",
    Callback = function(state)
        RunService:UnbindFromRenderStep("FlareESP")
        if state then
            RunService:BindToRenderStep("FlareESP", 1, function()
                for _, obj in pairs(Workspace:GetDescendants()) do
                    if obj:IsA("Tool") and obj.Name:lower():find("flare") then
                        applyHighlight(obj, Color3.fromRGB(255, 255, 0))
                    end
                end
            end)
        else
            clearESP()
        end
    end
})

MainTab:Select()
